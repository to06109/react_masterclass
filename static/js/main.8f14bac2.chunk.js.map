{"version":3,"sources":["Components/Header.tsx","api.ts","utils.ts","Routes/Home.tsx","Routes/Search.tsx","Routes/Tv.tsx","App.tsx","index.tsx","theme.ts"],"names":["Nav","styled","motion","nav","Col","div","Logo","svg","props","theme","red","Items","ul","Item","li","white","darker","lighter","Search","form","Circle","span","Input","input","logoVariants","normal","fillOpacity","active","transition","repeat","Infinity","navVariants","top","backgroundColor","scroll","Header","useState","searchOpen","setSearchOpen","homeMatch","useRouteMatch","tvMatch","inputAnimation","useAnimation","navAnimation","scrollY","useViewportScroll","useEffect","onChange","get","start","history","useHistory","useForm","register","handleSubmit","animate","variants","initial","whileHover","xmlns","width","height","viewBox","path","d","to","isExact","layoutId","onSubmit","data","push","keyword","onClick","scaleX","prev","x","type","fill","fillRule","clipRule","required","minLength","placeholder","getMovies","fetch","then","response","json","makeImagePath","id","format","Wrapper","Loader","Banner","bgPhoto","Title","h2","Overview","p","Slider","Row","Box","Info","Overlay","BigMovie","BicCover","BigTitle","h3","BigOverview","BigDate","BigRuntime","BigGenres","rowVariants","hidden","window","outerWidth","visible","exit","BoxVariants","scale","hover","y","delay","duaration","infoVariants","opacity","Home","bigMovieMatch","useQuery","isLoading","index","setIndex","leaving","setLeaving","toggleLeaving","clickedMovie","params","movieId","results","find","movie","movieDetail","setMovieDetail","a","totalMovies","length","maxIndex","Math","floor","backdrop_path","title","undefined","overview","slice","AnimatePresence","onExitComplete","duration","map","style","backgroundImage","display","alignItems","release_date","split","runtime","genres","i","name","location","useLocation","URLSearchParams","search","console","log","Tv","App","GlobalStyle","createGlobalStyle","client","QueryClient","ReactDOM","render","StrictMode","black","veryDark","document","getElementById"],"mappings":"0RAMMA,EAAMC,YAAOC,IAAOC,IAAdF,CAAH,kXAcHG,EAAMH,IAAOI,IAAV,sEAKHC,EAAOL,YAAOC,IAAOK,IAAdN,CAAH,6JAIA,SAACO,GAAD,OAAWA,EAAMC,MAAMC,OAM3BC,EAAQV,IAAOW,GAAV,qGAKLC,EAAOZ,IAAOa,GAAV,kUAGC,SAACN,GAAD,OAAWA,EAAMC,MAAMM,MAAMC,UAQ3B,SAACR,GAAD,OAAWA,EAAMC,MAAMM,MAAME,WAGpCC,EAASjB,IAAOkB,KAAV,+IAUNC,EAASnB,YAAOC,IAAOmB,KAAdpB,CAAH,8QAWU,SAACO,GAAD,OAAWA,EAAMC,MAAMC,OAGvCY,EAAQrB,YAAOC,IAAOqB,MAAdtB,CAAH,+bAaW,SAACO,GAAD,OAAWA,EAAMC,MAAMM,MAAME,WAG7CO,EAAe,CACnBC,OAAQ,CACNC,YAAa,GAEfC,OAAQ,CAGND,YAAa,CAAC,EAAG,EAAG,GAEpBE,WAAY,CACVC,OAAQC,OAKRC,EAAc,CAClBC,IAAK,CACHC,gBAAiB,oBAEnBC,OAAQ,CACND,gBAAiB,qBA4GNE,I,kCAAAA,GApGf,WACE,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAYC,YAAc,KAC1BC,EAAUD,YAAc,OACxBE,EAAiBC,cACjBC,EAAeD,cACbE,EAAYC,cAAZD,QAiBRE,qBAAU,WACRF,EAAQG,UAAS,WACXH,EAAQI,MAAQ,GAClBL,EAAaM,MAAM,UAEnBN,EAAaM,MAAM,YAGtB,CAACL,EAASD,IACb,IAAMO,EAAUC,cAChB,EAAmCC,cAA3BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAKlB,OACE,eAACvD,EAAD,CAAKwD,QAASZ,EAAca,SAAU1B,EAAa2B,QAAQ,MAA3D,UACE,eAACtD,EAAD,WACE,cAACE,EAAD,CACEmD,SAAUjC,EACVmC,WAAW,SACXD,QAAQ,SACRE,MAAM,6BACNC,MAAM,OACNC,OAAO,UACPC,QAAQ,mBAPV,SAUE,cAAC7D,EAAA,EAAO8D,KAAR,CAAaC,EAAE,m+BAEjB,eAACtD,EAAD,WACE,cAACE,EAAD,UAEE,eAAC,IAAD,CAAMqD,GAAG,IAAT,mBACiB,OAAT3B,QAAS,IAATA,OAAA,EAAAA,EAAW4B,UAAW,cAAC/C,EAAD,CAAQgD,SAAS,gBAGjD,cAACvD,EAAD,UAEE,eAAC,IAAD,CAAMqD,GAAG,MAAT,sBACYzB,GAAW,cAACrB,EAAD,CAAQgD,SAAS,sBAK9C,cAAChE,EAAD,UAEE,eAACc,EAAD,CAAQmD,SAAUd,GApCR,SAACe,GAEfnB,EAAQoB,KAAR,0BAAgCD,EAAKE,aAkCjC,UACE,cAACtE,EAAA,EAAOK,IAAR,CACEkE,QAjEW,WACfpC,EAGFK,EAAeQ,MAAM,CACnBwB,OAAQ,IAIVhC,EAAeQ,MAAM,CACnBwB,OAAQ,IAGZpC,GAAc,SAACqC,GAAD,OAAWA,MAsDjBnB,QAAS,CAAEoB,EAAGvC,GAAc,IAAM,GAElCT,WAAY,CAAEiD,KAAM,UACpBC,KAAK,eACLf,QAAQ,YACRH,MAAM,6BARR,SAUE,sBACEmB,SAAS,UACTd,EAAE,mHACFe,SAAS,cAIb,cAAC1D,EAAD,2BACMgC,EAAS,UAAW,CAAE2B,UAAU,EAAMC,UAAW,KADvD,IAEE1B,QAASd,EACTgB,QAAS,CAAEgB,OAAQ,GACnB9C,WAAY,CAAEiD,KAAM,UACpBM,YAAY,8C,gDC5LjB,SAASC,KACd,OAAOC,MAAM,GAAD,OA3BI,+BA2BJ,sCA5BE,qCA4BoDC,MAChE,SAACC,GAAD,OAAcA,EAASC,UC5BpB,SAASC,GAAcC,EAAYC,GACxC,MAAM,8BAAN,OAAqCA,GAAkB,WAAvD,YAAqED,GCyDvE,IAEME,GAAU3F,IAAOI,IAAV,kDAGPwF,GAAS5F,IAAOI,IAAV,mHAQNyF,GAAS7F,IAAOI,IAAV,ioBAYF,SAACG,GAAD,OAAWA,EAAMuF,WAIrBC,GAAQ/F,IAAOgG,GAAV,wEAKLC,GAAWjG,IAAOkG,EAAV,2MAMRC,GAASnG,IAAOI,IAAV,+KAONgG,GAAMpG,YAAOC,IAAOG,IAAdJ,CAAH,yLAUHqG,GAAMrG,YAAOC,IAAOG,IAAdJ,CAAH,sdAEiB,SAACO,GAAD,OAAWA,EAAMuF,WAerCQ,GAAOtG,YAAOC,IAAOG,IAAdJ,CAAH,6QAeJuG,GAAUvG,YAAOC,IAAOG,IAAdJ,CAAH,oJASPwG,GAAWxG,YAAOC,IAAOG,IAAdJ,CAAH,4RAYRyG,GAAWzG,IAAOI,IAAV,gIAORsG,GAAW1G,IAAO2G,GAAV,uHACH,SAACpG,GAAD,OAAWA,EAAMC,MAAMM,MAAME,WAOlC4F,GAAc5G,IAAOkG,EAAV,uHAKN,SAAC3F,GAAD,OAAWA,EAAMC,MAAMM,MAAME,WAGlC6F,GAAU7G,IAAO2G,GAAV,uHACF,SAACpG,GAAD,OAAWA,EAAMC,MAAMM,MAAME,WAOlC8F,GAAa9G,IAAO2G,GAAV,mGACL,SAACpG,GAAD,OAAWA,EAAMC,MAAMM,MAAME,WAMlC+F,GAAY/G,IAAOW,GAAV,+HACJ,SAACJ,GAAD,OAAWA,EAAMC,MAAMM,MAAME,WAOlCgG,GAAc,CAClBC,OAAQ,CAENtC,EAAGuC,OAAOC,WAAa,GAEzBC,QAAS,CAAEzC,EAAG,GACd0C,KAAM,CAAE1C,GAAIuC,OAAOC,WAAa,IAI5BG,GAAc,CAClB9F,OAAQ,CACN+F,MAAO,GAETC,MAAO,CACLD,MAAO,IAEPE,GAAI,GAEJ9F,WAAY,CACV+F,MAAO,GACPC,UAAW,GACX/C,KAAM,WAKNgD,GAAe,CACnBJ,MAAO,CACLK,QAAS,EACTlG,WAAY,CACV+F,MAAO,GACPC,UAAW,GACX/C,KAAM,WAuLGkD,OA/Kf,WACE,IAAM5E,EAAUC,cACV4E,EAAgBxF,YAAmC,oBACjDK,EAAYC,cAAZD,QACR,EAA4BoF,oBAC1B,CAAC,SAAU,cACX7C,IAFMd,EAAR,EAAQA,KAAM4D,EAAd,EAAcA,UAMd,EAA0B9F,mBAAS,GAAnC,mBAAO+F,EAAP,KAAcC,EAAd,KACA,EAA8BhG,oBAAS,GAAvC,mBAAOiG,EAAP,KAAgBC,EAAhB,KAYMC,EAAgB,kBAAMD,GAAW,SAAC3D,GAAD,OAAWA,MAa5C6D,GACS,OAAbR,QAAa,IAAbA,OAAA,EAAAA,EAAeS,OAAOC,WAAtB,OACApE,QADA,IACAA,OADA,EACAA,EAAMqE,QAAQC,MAAK,SAACC,GAAD,OAAWA,EAAMnD,MAAQsC,EAAcS,OAAOC,YAMnE,EAAsCtG,qBAAtC,mBAAO0G,EAAP,KAAoBC,EAApB,KAgBA,OAFAhG,qBAbuB,WAEnByF,GACE,wBAAC,+BAAAQ,EAAA,sEAEwB3D,MAAM,GAAD,OAtPpB,+BAsPoB,kBACJmD,EAAa9C,GADT,oBAvPtB,qCAqPP,cAEOH,EAFP,gBAKoBA,EAASC,OAL7B,OAKOA,EALP,OAMCuD,EAAevD,GANhB,0CAAD,KAUoB,CAACgD,IAGzB,cAAC5C,GAAD,UACGsC,EACC,cAACrC,GAAD,yBAGA,qCAGE,eAACC,GAAD,CACErB,QA1DY,WAEpB,GAAIH,EAAM,CACR,GAAI+D,EAAS,OACbE,IACA,IAAMU,EAAc3E,EAAKqE,QAAQO,OAAS,EACpCC,EAAWC,KAAKC,MAAMJ,EApBnB,GAoB2C,EAEpDb,GAAS,SAACzD,GAAD,OAAWA,IAASwE,EAAW,EAAIxE,EAAO,OAmD7CoB,QAASN,IAAkB,OAAJnB,QAAI,IAAJA,OAAA,EAAAA,EAAMqE,QAAQ,GAAGW,gBAAiB,IAF3D,UAIE,cAACtD,GAAD,WAAY,OAAJ1B,QAAI,IAAJA,OAAA,EAAAA,EAAMqE,QAAQ,GAAGY,aAASC,IAClC,cAACtD,GAAD,UACG5B,IAAY,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMqE,QAAQ,GAAGc,SAASP,QAAS,IAA3C,UACM5E,EAAKqE,QAAQ,GAAGc,SAASC,MAAM,EAAG,KADxC,QAEO,OAAJpF,QAAI,IAAJA,OAAA,EAAAA,EAAMqE,QAAQ,GAAGc,gBAAYD,OAGrC,cAACpD,GAAD,UACE,cAACuD,GAAA,EAAD,CAAiBjG,SAAS,EAAOkG,eAAgBrB,EAAjD,SACE,cAAClC,GAAD,CACE5C,SAAUwD,GACVvD,QAAQ,SACRF,QAAQ,UACR8D,KAAK,OACL1F,WAAY,CAAEiD,KAAM,QAASgF,SAAU,GALzC,gBASGvF,QATH,IASGA,OATH,EASGA,EAAMqE,QACJe,MAAM,GACNA,MA/FJ,EA+FmBvB,EA/FnB,EA+FmCA,EA/FnC,GAgGI2B,KAAI,SAACjB,GAAD,OACH,cAACvC,GAAD,CAEElC,SAAUyE,EAAMnD,GAAK,GAErB/B,WAAW,QACXD,QAAQ,SACRD,SAAU8D,GACV9C,QAAS,kBA7EPiE,EA6E0BG,EAAMnD,QA3EpDvC,EAAQoB,KAAR,kBAAwBmE,IAFL,IAACA,GA8EF9G,WAAY,CAAEiD,KAAM,SACpBkB,QAASN,GAAcoD,EAAMS,cAAe,QAT9C,SAWE,cAAC/C,GAAD,CAAM9C,SAAUoE,GAAhB,SACE,6BAAKgB,EAAMU,WATRV,EAAMnD,QAVZyC,OA0BX,cAACwB,GAAA,EAAD,UAEG3B,EACC,qCACE,cAACxB,GAAD,CACEc,KAAM,CAAEQ,QAAS,GACjBtE,QAAS,CAAEsE,QAAS,GACpBrD,QA5FO,WACrBtB,EAAQoB,KAAK,QA8FD,cAACkC,GAAD,CACEsD,MAAO,CAEL/H,IAAKa,EAAQI,MAAQ,KAGvBmB,SAAU4D,EAAcS,OAAOC,QANjC,SAQGF,GACC,qCACE,cAAC9B,GAAD,CAGEqD,MAAO,CACLC,gBAAgB,qDAAD,OAAuDvE,GACpE+C,EAAac,cACb,QAFa,QAMnB,cAAC3C,GAAD,UAAW6B,EAAae,QACxB,sBAAKQ,MAAO,CAAEE,QAAS,OAAQC,WAAY,UAA3C,UACE,cAACpD,GAAD,YACe,OAAXgC,QAAW,IAAXA,OAAA,EAAAA,EAAaqB,cAAe,IAAIC,MAAM,KAAK,KAE/C,cAACrD,GAAD,UACG+B,GAAW,UACPM,KAAKC,OAAiB,OAAXP,QAAW,IAAXA,OAAA,EAAAA,EAAauB,SAAU,IAD3B,yBAEG,OAAXvB,QAAW,IAAXA,OAAA,EAAAA,EAAauB,SAAU,GAFf,eAOhB,cAACxD,GAAD,UAAc2B,EAAaiB,WAC3B,cAACzC,GAAD,yCACU8B,QADV,IACUA,OADV,EACUA,EAAawB,OAAOR,KAC1B,SAACS,GAAD,MAAO,IAAMA,EAAEC,mBAOzB,aC5ZDtJ,OATf,WAEE,IAAMuJ,EAAWC,cAEXlG,EAAU,IAAImG,gBAAgBF,EAASG,QAAQ3H,IAAI,WAEzD,OADA4H,QAAQC,IAAItG,GACL,MCJMuG,OAJf,WACE,OAAO,qCCyBMC,I,GAAAA,GApBf,WACE,OACE,eAAC,IAAD,WACE,cAAC,GAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOhH,KAAK,MAAZ,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,UAAZ,SACE,cAAC,GAAD,MAGF,cAAC,IAAD,CAAOA,KAAM,CAAC,IAAK,oBAAnB,SACE,cAAC,GAAD,aCXJiH,GAAcC,YAAH,8+CAuDP,SAAC1K,GAAD,OAAWA,EAAMC,MAAMM,MAAMC,UAUjCmK,GAAS,IAAIC,eAEnBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,uBAAD,CAAqBJ,OAAQA,GAA7B,SACE,eAAC,IAAD,CAAe1K,MC7EY,CAC/BC,IAAK,UACL8K,MAAO,CACHC,SAAU,UACVzK,OAAQ,UACRC,QAAS,WAEbF,MAAO,CACHE,QAAS,OACTD,OAAQ,YDoER,UACE,cAACiK,GAAD,IACA,cAAC,GAAD,aAKRS,SAASC,eAAe,W","file":"static/js/main.8f14bac2.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport { motion, useAnimation, useViewportScroll } from \"framer-motion\";\r\nimport { Link, useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst Nav = styled(motion.nav)`\r\n  display: flex;\r\n  // 아이템들의 “사이(between)”에 균일한 간격을 만들어 줌\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  position: fixed;\r\n  width: 100%;\r\n  top: 0;\r\n  height: 80px;\r\n  font-size: 12px;\r\n  padding: 20px 60px;\r\n  color: white;\r\n`;\r\n// Nav 안의 두개의 열\r\nconst Col = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst Logo = styled(motion.svg)`\r\n  margin-right: 50px;\r\n  width: 95px;\r\n  height: 25px;\r\n  fill: ${(props) => props.theme.red};\r\n  path {\r\n    stroke-width: 6px;\r\n    stroke: white;\r\n  }\r\n`;\r\nconst Items = styled.ul`\r\n  display: flex;\r\n  // 수직정렬\r\n  align-items: center;\r\n`;\r\nconst Item = styled.li`\r\n  margin-right: 20px;\r\n  margin-right: 20px;\r\n  color: ${(props) => props.theme.white.darker};\r\n  transition: color 0.3s ease-in-out;\r\n  // 상대적인 위치 갖게함\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  &:hover {\r\n    color: ${(props) => props.theme.white.lighter};\r\n  }\r\n`;\r\nconst Search = styled.form`\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  svg {\r\n    height: 20px;\r\n  }\r\n  position: relative;\r\n`;\r\n\r\nconst Circle = styled(motion.span)`\r\n  width: 5px;\r\n  height: 5px;\r\n  border-radius: 5px;\r\n  bottom: -8px;\r\n  // 이러면 원이 가운데에 위치\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  margin: 0 auto;\r\n\r\n  background-color: ${(props) => props.theme.red};\r\n`;\r\n\r\nconst Input = styled(motion.input)`\r\n  // 변화가 시작하는 위치\r\n  transform-origin: right center;\r\n  // input이 search버튼 왼쪽에 있게함\r\n  position: absolute;\r\n  right: 0px;\r\n  padding: 5px 10px;\r\n  padding-left: 40px;\r\n  z-index: -1;\r\n  color: white;\r\n  font-size: 16px;\r\n  // input 배경 투명하게\r\n  background-color: transparent;\r\n  border: 1px solid ${(props) => props.theme.white.lighter};\r\n`;\r\n\r\nconst logoVariants = {\r\n  normal: {\r\n    fillOpacity: 1,\r\n  },\r\n  active: {\r\n    // 배열을 이용해 단계적으로 값을 지정할 수 있음\r\n    // fillOpacity: [0, 0.5, 0, 0.7, 0, 0.2, 1, 0],\r\n    fillOpacity: [0, 1, 0],\r\n    // 해당 애니메이션을 무한 반복\r\n    transition: {\r\n      repeat: Infinity,\r\n    },\r\n  },\r\n};\r\n\r\nconst navVariants = {\r\n  top: {\r\n    backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n  },\r\n  scroll: {\r\n    backgroundColor: \"rgba(0, 0, 0, 1)\",\r\n  },\r\n};\r\n\r\ninterface IForm {\r\n  keyword: string;\r\n}\r\n\r\nfunction Header() {\r\n  const [searchOpen, setSearchOpen] = useState(false);\r\n  const homeMatch = useRouteMatch(\"/\");\r\n  const tvMatch = useRouteMatch(\"/tv\");\r\n  const inputAnimation = useAnimation();\r\n  const navAnimation = useAnimation();\r\n  const { scrollY } = useViewportScroll();\r\n  const toggleSearch = () => {\r\n    if (searchOpen) {\r\n      // 검색창이 열려있으면 닫는 애니메이션 실행\r\n      // trigger the close animation\r\n      inputAnimation.start({\r\n        scaleX: 0,\r\n      });\r\n    } else {\r\n      // trigger the open animation\r\n      inputAnimation.start({\r\n        scaleX: 1,\r\n      });\r\n    }\r\n    setSearchOpen((prev) => !prev);\r\n  };\r\n  // scrollY는 컴포넌트를 새로고침하지 않기 때문에 이렇게 onChange를 이용해서 값을 읽어야함\r\n  useEffect(() => {\r\n    scrollY.onChange(() => {\r\n      if (scrollY.get() > 80) {\r\n        navAnimation.start(\"scroll\");\r\n      } else {\r\n        navAnimation.start(\"top\");\r\n      }\r\n    });\r\n  }, [scrollY, navAnimation]);\r\n  const history = useHistory();\r\n  const { register, handleSubmit } = useForm<IForm>();\r\n  const onValid = (data: IForm) => {\r\n    // 주소로 query argument 보냄\r\n    history.push(`/search?keyword=${data.keyword}`);\r\n  };\r\n  return (\r\n    <Nav animate={navAnimation} variants={navVariants} initial=\"top\">\r\n      <Col>\r\n        <Logo\r\n          variants={logoVariants}\r\n          whileHover=\"active\"\r\n          initial=\"normal\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"1024\"\r\n          height=\"276.742\"\r\n          viewBox=\"0 0 1024 276.742\"\r\n        >\r\n          {/* 로고에 애니메이션 넣어줄거면 path도 motion이어야함 */}\r\n          <motion.path d=\"M140.803 258.904c-15.404 2.705-31.079 3.516-47.294 5.676l-49.458-144.856v151.073c-15.404 1.621-29.457 3.783-44.051 5.945v-276.742h41.08l56.212 157.021v-157.021h43.511v258.904zm85.131-157.558c16.757 0 42.431-.811 57.835-.811v43.24c-19.189 0-41.619 0-57.835.811v64.322c25.405-1.621 50.809-3.785 76.482-4.596v41.617l-119.724 9.461v-255.39h119.724v43.241h-76.482v58.105zm237.284-58.104h-44.862v198.908c-14.594 0-29.188 0-43.239.539v-199.447h-44.862v-43.242h132.965l-.002 43.242zm70.266 55.132h59.187v43.24h-59.187v98.104h-42.433v-239.718h120.808v43.241h-78.375v55.133zm148.641 103.507c24.594.539 49.456 2.434 73.51 3.783v42.701c-38.646-2.434-77.293-4.863-116.75-5.676v-242.689h43.24v201.881zm109.994 49.457c13.783.812 28.377 1.623 42.43 3.242v-254.58h-42.43v251.338zm231.881-251.338l-54.863 131.615 54.863 145.127c-16.217-2.162-32.432-5.135-48.648-7.838l-31.078-79.994-31.617 73.51c-15.678-2.705-30.812-3.516-46.484-5.678l55.672-126.75-50.269-129.992h46.482l28.377 72.699 30.27-72.699h47.295z\" />\r\n        </Logo>\r\n        <Items>\r\n          <Item>\r\n            {/* homeMatch의 isExact가 true인지 확인하고 Circle컴포넌트를 보여줌 */}\r\n            <Link to=\"/\">\r\n              Home {homeMatch?.isExact && <Circle layoutId=\"circle\" />}\r\n            </Link>\r\n          </Item>\r\n          <Item>\r\n            {/* tvMatch가 존재하는 지 확인하고 Circle컴포넌트를 보여줌 */}\r\n            <Link to=\"/tv\">\r\n              TV Shows {tvMatch && <Circle layoutId=\"circle\" />}\r\n            </Link>\r\n          </Item>\r\n        </Items>\r\n      </Col>\r\n      <Col>\r\n        {/* 데이터가 유효할 때 onValid 함수 실행 */}\r\n        <Search onSubmit={handleSubmit(onValid)}>\r\n          <motion.svg\r\n            onClick={toggleSearch}\r\n            // searchOpen에 따라 돋보기가 움직임\r\n            animate={{ x: searchOpen ? -220 : 0 }}\r\n            // 움직일 때 튀지않게 linear로 바꿔줌\r\n            transition={{ type: \"linear\" }}\r\n            fill=\"currentColor\"\r\n            viewBox=\"0 0 20 20\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              fillRule=\"evenodd\"\r\n              d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\r\n              clipRule=\"evenodd\"\r\n            ></path>\r\n          </motion.svg>\r\n          {/* searchOpen이 true면 scaleX 1, 아니면 0 -> 애니메이션 중앙에서 시작함*/}\r\n          <Input\r\n            {...register(\"keyword\", { required: true, minLength: 2 })}\r\n            animate={inputAnimation}\r\n            initial={{ scaleX: 0 }}\r\n            transition={{ type: \"linear\" }}\r\n            placeholder=\"Search for movie or tv shhow...\"\r\n          />\r\n        </Search>\r\n      </Col>\r\n    </Nav>\r\n  );\r\n}\r\nexport default Header;\r\n","const API_KEY = \"4a46252518b7dc6367549254b2ec8500\";\r\nconst BASE_PATH = \"https://api.themoviedb.org/3\";\r\n// https://api.themoviedb.org/3/movie/now_playing?api_key=4a46252518b7dc6367549254b2ec8500&language=en-US&page=1&region=kr\r\n\r\n// IGetMoviesResult의 result타입\r\ninterface IMovie {\r\n  // 내가 쓸 것만 적어줌\r\n  id: number;\r\n  backdrop_path: string;\r\n  poster_path: string;\r\n  title: string;\r\n  overview: string;\r\n}\r\n\r\n// getMovies의 결과\r\nexport interface IGetMoviesResult {\r\n  dates: {\r\n    maximum: string;\r\n    minimum: string;\r\n  };\r\n  page: number;\r\n  results: IMovie[];\r\n  total_pages: number;\r\n  total_results: number;\r\n}\r\n\r\n// fetcher 함수\r\nexport function getMovies() {\r\n  return fetch(`${BASE_PATH}/movie/now_playing?api_key=${API_KEY}`).then(\r\n    (response) => response.json()\r\n  );\r\n}\r\n","// 이미지의 경로를 만들어주는 함수\r\nexport function makeImagePath(id: string, format?: string) {\r\n  return `https://image.tmdb.org/t/p/${format ? format : \"original\"}/${id}`;\r\n}\r\n// format이지정되어서 오면 그걸 쓰고 아니면 default로 original 씀\r\n","import { useQuery } from 'react-query'\r\nimport styled from 'styled-components'\r\nimport { motion, AnimatePresence, useViewportScroll } from 'framer-motion'\r\nimport { getMovies, IGetMoviesResult } from '../api'\r\nimport { makeImagePath } from '../utils'\r\nimport { useEffect, useState } from 'react'\r\nimport { useHistory, useRouteMatch } from 'react-router-dom'\r\n\r\nexport interface IGetMovieDetail {\r\n  adult: boolean\r\n  backdrop_path: string\r\n  belongs_to_collection: null\r\n  budget: number\r\n  genres: IGenres[]\r\n  homepage: string\r\n  id: number\r\n  imdb_id: string\r\n  original_language: string\r\n  original_title: string\r\n  overview: string\r\n  popularity: number\r\n  poster_path: string\r\n  production_companies: ProductionCompany[]\r\n  production_countries: ProductionCountry[]\r\n  release_date: Date\r\n  revenue: number\r\n  runtime: number\r\n  spoken_languages: SpokenLanguage[]\r\n  status: string\r\n  tagline: string\r\n  title: string\r\n  video: boolean\r\n  vote_average: number\r\n  vote_count: number\r\n}\r\n\r\nexport interface IGenres {\r\n  id: number\r\n  name: string\r\n}\r\n\r\nexport interface ProductionCompany {\r\n  id: number\r\n  logo_path: null | string\r\n  name: string\r\n  origin_country: string\r\n}\r\n\r\nexport interface ProductionCountry {\r\n  iso_3166_1: string\r\n  name: string\r\n}\r\n\r\nexport interface SpokenLanguage {\r\n  english_name: string\r\n  iso_639_1: string\r\n  name: string\r\n}\r\n\r\nconst API_KEY = '4a46252518b7dc6367549254b2ec8500'\r\nconst BASE_PATH = 'https://api.themoviedb.org/3'\r\nconst Wrapper = styled.div`\r\n  background: black;\r\n`\r\nconst Loader = styled.div`\r\n  height: 20vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\n// props 타입 알려줌\r\nconst Banner = styled.div<{ bgPhoto: string }>`\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  // Banner div의 중앙에 위치\r\n  justify-content: center;\r\n  // 여백 60px\r\n  padding: 60px;\r\n  // 배경화면 설정\r\n  // 글자가 이미지에 가려져서 안보일수 있음\r\n  // -> 같은 div에 다른 배경을 가질 수 있도록함 -> 이미지를 덮음\r\n  background-image: linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.9)),\r\n    url(${(props) => props.bgPhoto});\r\n  background-size: cover;\r\n`\r\n\r\nconst Title = styled.h2`\r\n  font-size: 68px;\r\n  margin-bottom: 20px;\r\n`\r\n\r\nconst Overview = styled.p`\r\n  font-size: 36px;\r\n  // 줄거리 너무 길기 때문에 너비를 화면의 반으로 설정\r\n  width: 50%;\r\n`\r\n\r\nconst Slider = styled.div`\r\n  // state 기준 위치\r\n  position: relative;\r\n  // 슬라이더를 좀 위로 올림\r\n  top: -100px;\r\n`\r\n\r\nconst Row = styled(motion.div)`\r\n  display: grid;\r\n  gap: 5px;\r\n  grid-template-columns: repeat(6, 1fr);\r\n  // 부모 기준 위치\r\n  position: absolute;\r\n  width: 100%;\r\n`\r\n\r\n// Box에 이미지 props 들어가는 type알려줌\r\nconst Box = styled(motion.div)<{ bgPhoto: string }>`\r\n  background-color: white;\r\n  background-image: url(${(props) => props.bgPhoto});\r\n  background-size: cover;\r\n  background-position: center center;\r\n  height: 200px;\r\n  font-size: 66px;\r\n  cursor: pointer;\r\n  // 포스터 잘리지 않게 첫번째, 마지막 박스는 transform-origin 줌\r\n  &:first-child {\r\n    transform-origin: center left;\r\n  }\r\n  &:last-child {\r\n    transform-origin: center right;\r\n  }\r\n`\r\n\r\nconst Info = styled(motion.div)`\r\n  padding: 10px;\r\n  background: linear-gradient(to top, black 40%, rgba(0, 0, 0, 0.5));\r\n  opacity: 0;\r\n  position: absolute;\r\n  width: 100%;\r\n  bottom: 0;\r\n  font-weight: bolder;\r\n  h4 {\r\n    text-align: center;\r\n    font-size: 18px;\r\n  }\r\n`\r\n\r\n// 카드 나올 때 뒷배경\r\nconst Overlay = styled(motion.div)`\r\n  position: fixed;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  opacity: 0;\r\n`\r\n\r\nconst BigMovie = styled(motion.div)`\r\n  position: absolute;\r\n  width: 40vw;\r\n  height: 72vh;\r\n  left: 0;\r\n  right: 0;\r\n  margin: 0 auto;\r\n  border-radius: 15px;\r\n  overflow: hidden; // 이미지 삐져나오는거 숨김\r\n  background-color: rgba(0, 0, 0, 1);\r\n`\r\n\r\nconst BicCover = styled.div`\r\n  width: 100%;\r\n  background-size: cover;\r\n  background-position: center center;\r\n  height: 400px;\r\n`\r\n\r\nconst BigTitle = styled.h3`\r\n  color: ${(props) => props.theme.white.lighter};\r\n  padding: 20px;\r\n  font-size: 36px;\r\n  position: relative;\r\n  top: -75px;\r\n`\r\n\r\nconst BigOverview = styled.p`\r\n  padding: 20px;\r\n  position: relative;\r\n  font-size: 20px;\r\n  top: -80px;\r\n  color: ${(props) => props.theme.white.lighter};\r\n`\r\n\r\nconst BigDate = styled.h3`\r\n  color: ${(props) => props.theme.white.lighter};\r\n  padding: 20px;\r\n  font-size: 18px;\r\n  position: relative;\r\n  top: -80px;\r\n`\r\n\r\nconst BigRuntime = styled.h3`\r\n  color: ${(props) => props.theme.white.lighter};\r\n  padding: 18px;\r\n  position: relative;\r\n  top: -80px;\r\n`\r\n\r\nconst BigGenres = styled.ul`\r\n  color: ${(props) => props.theme.white.lighter};\r\n  padding: 20px;\r\n  /* font-size: 36px; */\r\n  position: absolute;\r\n  bottom: 10px;\r\n`\r\n\r\nconst rowVariants = {\r\n  hidden: {\r\n    // Row와 Row 사이 gap 조절\r\n    x: window.outerWidth + 5,\r\n  },\r\n  visible: { x: 0 },\r\n  exit: { x: -window.outerWidth - 5 },\r\n}\r\n\r\n// Box Animation\r\nconst BoxVariants = {\r\n  normal: {\r\n    scale: 1,\r\n  },\r\n  hover: {\r\n    scale: 1.3,\r\n    // 약간 올라가게\r\n    y: -50,\r\n    // hover일때만 delay주기\r\n    transition: {\r\n      delay: 0.5,\r\n      duaration: 0.3,\r\n      type: 'tween',\r\n    },\r\n  },\r\n}\r\n\r\nconst infoVariants = {\r\n  hover: {\r\n    opacity: 1,\r\n    transition: {\r\n      delay: 0.5,\r\n      duaration: 0.3,\r\n      type: 'tween',\r\n    },\r\n  },\r\n}\r\n\r\n// 한 번에 보여주고 싶은 영화의 수\r\nconst offset = 6\r\n\r\nfunction Home() {\r\n  const history = useHistory()\r\n  const bigMovieMatch = useRouteMatch<{ movieId: string }>('/movies/:movieId')\r\n  const { scrollY } = useViewportScroll()\r\n  const { data, isLoading } = useQuery<IGetMoviesResult>(\r\n    ['movies', 'nowPlaying'],\r\n    getMovies,\r\n  )\r\n\r\n  // Row index\r\n  const [index, setIndex] = useState(0)\r\n  const [leaving, setLeaving] = useState(false)\r\n  const increaseIndex = () => {\r\n    // 영화 개수에 따라 page가 상한에 도달했으면 index 0 으로 만들어줌\r\n    if (data) {\r\n      if (leaving) return\r\n      toggleLeaving()\r\n      const totalMovies = data.results.length - 1 // 배너로 사용하는거 제외\r\n      const maxIndex = Math.floor(totalMovies / offset) - 1 // index 0에서부터 시작하므로\r\n      // maxIndex에 도달하면 0으로\r\n      setIndex((prev) => (prev === maxIndex ? 0 : prev + 1))\r\n    }\r\n  }\r\n  const toggleLeaving = () => setLeaving((prev) => !prev)\r\n  // 박스가 클릭되었을 때 영화 id를 받고싶음\r\n  const onBoxClicked = (movieId: number) => {\r\n    // URL 바꾸기: history\r\n    history.push(`/movies/${movieId}`)\r\n  }\r\n  const onOverlayClick = () => {\r\n    history.push('/')\r\n  }\r\n\r\n  // 카드에서 데이터 재활용.\r\n  // bigMovieMatch가 존재하는 경우에 클릭한 영화 아이디와 동일한 영화정보를 data에서 꺼내 clickedMovie에 저장함\r\n  // string 앞에 +붙이면 number됨\r\n  const clickedMovie =\r\n    bigMovieMatch?.params.movieId &&\r\n    data?.results.find((movie) => movie.id === +bigMovieMatch.params.movieId)\r\n\r\n  // Movie Detail\r\n  // clickedMovie && getMovieDetail(clickedMovie.id)\r\n\r\n  // Movie Detail\r\n  const [movieDetail, setMovieDetail] = useState<IGetMovieDetail>()\r\n  const getMovieDetail = () => {\r\n    {\r\n      clickedMovie &&\r\n        (async () => {\r\n          //fetcher\r\n          const response = await fetch(\r\n            `${BASE_PATH}/movie/${clickedMovie.id}?api_key=${API_KEY}`,\r\n          )\r\n          const json = await response.json()\r\n          setMovieDetail(json)\r\n        })()\r\n    }\r\n  }\r\n  useEffect(getMovieDetail, [clickedMovie])\r\n\r\n  return (\r\n    <Wrapper>\r\n      {isLoading ? (\r\n        <Loader>Loading...</Loader>\r\n      ) : (\r\n        // 홈 화면에서 배너 뿐만 아니라 여러 슬라이더도 보여줄것이므로 유령컴포넌트로 여러 컴포넌트 묶음\r\n        <>\r\n          {/* bgPhoto로 이미지의 링크를 만들어서 보냄 */}\r\n          {/* data가 존재하지 않을 때의 fallback 만들어줘야함 */}\r\n          <Banner\r\n            onClick={increaseIndex}\r\n            bgPhoto={makeImagePath(data?.results[0].backdrop_path || '')}\r\n          >\r\n            <Title>{data?.results[0].title || undefined}</Title>\r\n            <Overview>\r\n              {data && data?.results[0].overview.length > 200\r\n                ? `${data.results[0].overview.slice(0, 200)}...`\r\n                : data?.results[0].overview || undefined}\r\n            </Overview>\r\n          </Banner>\r\n          <Slider>\r\n            <AnimatePresence initial={false} onExitComplete={toggleLeaving}>\r\n              <Row\r\n                variants={rowVariants}\r\n                initial=\"hidden\"\r\n                animate=\"visible\"\r\n                exit=\"exit\"\r\n                transition={{ type: 'tween', duration: 1 }}\r\n                key={index}\r\n              >\r\n                {/* 0번째 영화는 배경에 만드는데 사용했으므로 제외 */}\r\n                {data?.results\r\n                  .slice(1)\r\n                  .slice(offset * index, offset * index + offset)\r\n                  .map((movie) => (\r\n                    <Box\r\n                      // layoutId는 string이어야함\r\n                      layoutId={movie.id + ''}\r\n                      key={movie.id}\r\n                      whileHover=\"hover\"\r\n                      initial=\"normal\"\r\n                      variants={BoxVariants}\r\n                      onClick={() => onBoxClicked(movie.id)}\r\n                      transition={{ type: 'tween' }}\r\n                      bgPhoto={makeImagePath(movie.backdrop_path, 'w500')}\r\n                    >\r\n                      <Info variants={infoVariants}>\r\n                        <h4>{movie.title}</h4>\r\n                      </Info>\r\n                    </Box>\r\n                  ))}\r\n              </Row>\r\n            </AnimatePresence>\r\n          </Slider>\r\n          <AnimatePresence>\r\n            {/* bigMovieMatch가 존재할 때만 보여야함 */}\r\n            {bigMovieMatch ? (\r\n              <>\r\n                <Overlay\r\n                  exit={{ opacity: 0 }}\r\n                  animate={{ opacity: 1 }}\r\n                  onClick={onOverlayClick}\r\n                />\r\n                {/* Box마다 unipue한 layoutId을 줘야하므로 movieId를 사용 */}\r\n                <BigMovie\r\n                  style={{\r\n                    // 사용자가 어디 있더라도 top의 속성값은 거기가 됨\r\n                    top: scrollY.get() + 100,\r\n                  }}\r\n                  // typescript한테 bigMovieMatch 설명해줘야함\r\n                  layoutId={bigMovieMatch.params.movieId}\r\n                >\r\n                  {clickedMovie && (\r\n                    <>\r\n                      <BicCover\r\n                        // gradient -> backgroundImage 2개 넣으면 됨\r\n                        // to top: gradient 방향 아래 ->  위로\r\n                        style={{\r\n                          backgroundImage: `linear-gradient(to top, black, transparent),  url(${makeImagePath(\r\n                            clickedMovie.backdrop_path,\r\n                            'w500',\r\n                          )})`,\r\n                        }}\r\n                      />\r\n                      <BigTitle>{clickedMovie.title}</BigTitle>\r\n                      <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                        <BigDate>\r\n                          {(movieDetail?.release_date + '').split('-')[0]}\r\n                        </BigDate>\r\n                        <BigRuntime>\r\n                          {movieDetail &&\r\n                            `${Math.floor(movieDetail?.runtime / 60)}시간 ${\r\n                              movieDetail?.runtime % 60\r\n                            }분`}\r\n                        </BigRuntime>\r\n                      </div>\r\n\r\n                      <BigOverview>{clickedMovie.overview}</BigOverview>\r\n                      <BigGenres>\r\n                        {`장르: ${movieDetail?.genres.map(\r\n                          (i) => ' ' + i.name,\r\n                        )}`}\r\n                      </BigGenres>\r\n                    </>\r\n                  )}\r\n                </BigMovie>\r\n              </>\r\n            ) : null}\r\n          </AnimatePresence>\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Home","import { useLocation } from \"react-router-dom\";\r\n\r\nfunction Search() {\r\n  // Home에서 보낸 keyword에 접근\r\n  const location = useLocation();\r\n  // keyword parse\r\n  const keyword = new URLSearchParams(location.search).get(\"keyword\");\r\n  console.log(keyword);\r\n  return null;\r\n}\r\n\r\nexport default Search;\r\n","function Tv() {\r\n  return <h1>Tv</h1>\r\n}\r\n\r\nexport default Tv\r\n","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Header from \"./Components/Header\";\r\nimport Home from \"./Routes/Home\";\r\nimport Search from \"./Routes/Search\";\r\nimport Tv from \"./Routes/Tv\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Header />\r\n      <Switch>\r\n        <Route path=\"/tv\">\r\n          <Tv />\r\n        </Route>\r\n        <Route path=\"/search\">\r\n          <Search />\r\n        </Route>\r\n        {/* 두 경우에 모두 Home을 render하도록 path를 배열로 묶어줌 */}\r\n        <Route path={[\"/\", \"/movies/:movieId\"]}>\r\n          <Home />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport App from \"./App\";\r\nimport { theme } from \"./theme\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, menu, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmain, menu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, main, menu, nav, section {\r\n  display: block;\r\n}\r\n/* HTML5 hidden-attribute fix for newer browsers */\r\n*[hidden] {\r\n    display: none;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nmenu, ol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  font-weight: 300;\r\n  font-family: 'Source Sans Pro', sans-serif;\r\n  color:${(props) => props.theme.white.darker};\r\n  line-height: 1.2;\r\n  background-color: black;\r\n}\r\na {\r\n  text-decoration:none;  \r\n  color:inherit;\r\n}\r\n`;\r\n\r\nconst client = new QueryClient();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <QueryClientProvider client={client}>\r\n        <ThemeProvider theme={theme}>\r\n          <GlobalStyle />\r\n          <App />\r\n        </ThemeProvider>\r\n      </QueryClientProvider>\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import { DefaultTheme } from 'styled-components'\r\n\r\nexport const theme: DefaultTheme = {\r\n    red: \"#E51013\",\r\n    black: {\r\n        veryDark: \"#141414\",\r\n        darker: \"#181818\",\r\n        lighter: \"#2F2F2F\",\r\n    },\r\n    white: {\r\n        lighter: \"#fff\",\r\n        darker: \"#e5e5e5\",\r\n    }\r\n}\r\n"],"sourceRoot":""}